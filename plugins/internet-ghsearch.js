import fetch from 'node-fetch';

let handler = async (m, { text, command, usedPrefix }) => {
    if (!text) throw `Contoh:\n${usedPrefix + command} stikerinbot`;
    try {
        let res = await fetch(global.API('https://api.github.com', '/search/repositories', {
            q: text
        }));
        if (!res.ok) throw 'Eror';
        let json = await res.json();

        let repoDetails = json.items.map((repo, index) => {
            return `
            >      „Äå ${1 + index} „Äç       <
            …¥·¥Ä·¥ç·¥á  Ä·¥á·¥ò·¥è : ${repo.name}
             ô è : ${repo.owner.login}
            “ì·¥è Ä·¥ã·¥á·¥Ö : ${repo.fork ? 'True' : 'False'}
            ·¥ò Ä…™·¥†·¥Ä·¥õ·¥á : ${repo.private ? 'True' : 'False'}

            ‚ûî ·¥Ñ Ä·¥á·¥Ä·¥õ·¥á·¥Ö ·¥è…¥ : ${formatDate(repo.created_at)}
            ‚ûî  ü·¥Äs·¥õ ·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥á ·¥è…¥ : ${formatDate(repo.updated_at)}
            üëÅ  ${repo.watchers}   üç¥  ${repo.forks}   ‚≠ê  ${repo.stargazers_count}
            ‚ùó …™ss·¥ú·¥á : ${repo.open_issues}${repo.description ? `\nüìö ·¥Ö·¥ás·¥Ñ Ä…™·¥ò·¥õ…™·¥è…¥:\n${repo.description}` : ''}
            
            ‚ëÇ ·¥Ñ ü·¥è…¥·¥á :
            $ git clone ${repo.clone_url}
            `.trim();
        }).join('\n‚Äî ‚Äî ‚Äî ‚Äî ‚Äî ‚Äî ‚Äî ‚Äî ‚Äî ‚Äî ‚Äî ‚Äî ‚Äî ‚Äî\n');

        let replyText = `*${htki} …¢…™·¥õ ú·¥ú ô s·¥á·¥Ä Ä·¥Ñ ú ${htka}*\n${repoDetails}`;
        conn.reply(m.chat, replyText, m);

    } catch (error) {
        console.error(error);
    }
};

handler.help = ['githubsearch'].map(v => v + ' <pencarian>');
handler.tags = ['internet', 'downloader'];
handler.command = /^g(ithub|h)s(earch)?$/i;

export default handler;

function formatDate(n, locale = 'id') {
    let d = new Date(n);
    return d.toLocaleDateString(locale, {
        weekday: 'long',
        day: 'numeric',
        month: 'long',
        year: 'numeric',
        hour: 'numeric',
        minute: 'numeric',
        second: 'numeric'
    });
}
